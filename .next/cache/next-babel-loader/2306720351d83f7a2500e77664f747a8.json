{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/felipechernicharo/Desktop/Dev/testes/framer-motion-side-menu-forked/components/Example.tsx\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ContentPlaceholder } from \"./ContentPlaceholder\";\n\nconst Accordion = ({\n  i,\n  expanded,\n  setExpanded\n}) => {\n  const isOpen = i === expanded; // By using `AnimatePresence` to mount and unmount the contents, we can animate\n  // them in and out while also only rendering the contents of open accordions\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(motion.header, {\n      initial: false,\n      animate: {\n        backgroundColor: isOpen ? \"#FF0088\" : \"#0055FF\"\n      },\n      onClick: () => setExpanded(isOpen ? false : i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      initial: false,\n      children: isOpen && /*#__PURE__*/_jsxDEV(motion.section, {\n        initial: \"collapsed\",\n        animate: \"open\",\n        exit: \"collapsed\",\n        variants: {\n          open: {\n            opacity: 1,\n            height: \"auto\"\n          },\n          collapsed: {\n            opacity: 0,\n            height: 0\n          }\n        },\n        transition: {\n          duration: 0.8,\n          ease: [0.04, 0.62, 0.23, 0.98]\n        },\n        children: /*#__PURE__*/_jsxDEV(ContentPlaceholder, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, \"content\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport const Example = () => {\n  // This approach is if you only want max one section open at a time. If you want multiple\n  // sections to potentially be open simultaneously, they can all be given their own `useState`.\n  const {\n    0: expanded,\n    1: setExpanded\n  } = useState(0);\n  return accordionIds.map(i => /*#__PURE__*/_jsxDEV(Accordion, {\n    i: i,\n    expanded: expanded,\n    setExpanded: setExpanded\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this));\n};\nconst accordionIds = [0, 1, 2, 3];","map":{"version":3,"sources":["/Users/felipechernicharo/Desktop/Dev/testes/framer-motion-side-menu-forked/components/Example.tsx"],"names":["React","useState","motion","AnimatePresence","ContentPlaceholder","Accordion","i","expanded","setExpanded","isOpen","backgroundColor","open","opacity","height","collapsed","duration","ease","Example","accordionIds","map"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,eAAxC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,CAAF;AAAKC,EAAAA,QAAL;AAAeC,EAAAA;AAAf,CAAD,KAAkC;AAClD,QAAMC,MAAM,GAAGH,CAAC,KAAKC,QAArB,CADkD,CAGlD;AACA;;AACA,sBACE;AAAA,4BACE,QAAC,MAAD,CAAQ,MAAR;AACE,MAAA,OAAO,EAAE,KADX;AAEE,MAAA,OAAO,EAAE;AAAEG,QAAAA,eAAe,EAAED,MAAM,GAAG,SAAH,GAAe;AAAxC,OAFX;AAGE,MAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,MAAM,GAAG,KAAH,GAAWH,CAAlB;AAH5B;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,eAAD;AAAiB,MAAA,OAAO,EAAE,KAA1B;AAAA,gBACGG,MAAM,iBACL,QAAC,MAAD,CAAQ,OAAR;AAEE,QAAA,OAAO,EAAC,WAFV;AAGE,QAAA,OAAO,EAAC,MAHV;AAIE,QAAA,IAAI,EAAC,WAJP;AAKE,QAAA,QAAQ,EAAE;AACRE,UAAAA,IAAI,EAAE;AAAEC,YAAAA,OAAO,EAAE,CAAX;AAAcC,YAAAA,MAAM,EAAE;AAAtB,WADE;AAERC,UAAAA,SAAS,EAAE;AAAEF,YAAAA,OAAO,EAAE,CAAX;AAAcC,YAAAA,MAAM,EAAE;AAAtB;AAFH,SALZ;AASE,QAAA,UAAU,EAAE;AAAEE,UAAAA,QAAQ,EAAE,GAAZ;AAAiBC,UAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB;AAAvB,SATd;AAAA,+BAWE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAXF,SACM,SADN;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YANF;AAAA,kBADF;AA0BD,CA/BD;;AAiCA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B;AACA;AACA,QAAM;AAAA,OAACV,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAiB,CAAjB,CAAxC;AAEA,SAAOiB,YAAY,CAACC,GAAb,CAAkBb,CAAD,iBACtB,QAAC,SAAD;AAAW,IAAA,CAAC,EAAEA,CAAd;AAAiB,IAAA,QAAQ,EAAEC,QAA3B;AAAqC,IAAA,WAAW,EAAEC;AAAlD;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AAGD,CARM;AAUP,MAAMU,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAArB","sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ContentPlaceholder } from \"./ContentPlaceholder\";\n\nconst Accordion = ({ i, expanded, setExpanded }) => {\n  const isOpen = i === expanded;\n\n  // By using `AnimatePresence` to mount and unmount the contents, we can animate\n  // them in and out while also only rendering the contents of open accordions\n  return (\n    <>\n      <motion.header\n        initial={false}\n        animate={{ backgroundColor: isOpen ? \"#FF0088\" : \"#0055FF\" }}\n        onClick={() => setExpanded(isOpen ? false : i)}\n      />\n      <AnimatePresence initial={false}>\n        {isOpen && (\n          <motion.section\n            key=\"content\"\n            initial=\"collapsed\"\n            animate=\"open\"\n            exit=\"collapsed\"\n            variants={{\n              open: { opacity: 1, height: \"auto\" },\n              collapsed: { opacity: 0, height: 0 },\n            }}\n            transition={{ duration: 0.8, ease: [0.04, 0.62, 0.23, 0.98] }}\n          >\n            <ContentPlaceholder />\n          </motion.section>\n        )}\n      </AnimatePresence>\n    </>\n  );\n};\n\nexport const Example = () => {\n  // This approach is if you only want max one section open at a time. If you want multiple\n  // sections to potentially be open simultaneously, they can all be given their own `useState`.\n  const [expanded, setExpanded] = useState<false | number>(0);\n\n  return accordionIds.map((i) => (\n    <Accordion i={i} expanded={expanded} setExpanded={setExpanded} />\n  ));\n};\n\nconst accordionIds = [0, 1, 2, 3];\n"]},"metadata":{},"sourceType":"module"}