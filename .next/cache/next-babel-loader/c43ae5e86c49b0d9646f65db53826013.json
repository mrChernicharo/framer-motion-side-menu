{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/felipechernicharo/Desktop/Dev/testes/framer-motion-side-menu-forked/components/ContentPlaceholder.tsx\";\nimport * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { mix } from \"@popmotion/popcorn\";\n\nconst randomInt = (min, max) => Math.round(mix(min, max, Math.random()));\n\nconst generateParagraphLength = () => randomInt(5, 20);\n\nconst generateWordLength = () => randomInt(20, 100); // Randomly generate some paragraphs of word lengths\n\n\nconst paragraphs = [...Array(3)].map(() => {\n  return [...Array(generateParagraphLength())].map(generateWordLength);\n});\nexport const Word = ({\n  width\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"word\",\n  style: {\n    width\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 36\n}, this);\n\nconst Paragraph = ({\n  words\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"paragraph\",\n  children: words.map(width => /*#__PURE__*/_jsxDEV(Word, {\n    width: width\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 3\n}, this);\n\nexport const ContentPlaceholder = () => /*#__PURE__*/_jsxDEV(motion.div, {\n  variants: {\n    collapsed: {\n      scale: 0.8\n    },\n    open: {\n      scale: 1\n    }\n  },\n  transition: {\n    duration: 0.8\n  },\n  className: \"content-placeholder\",\n  children: paragraphs.map(words => /*#__PURE__*/_jsxDEV(Paragraph, {\n    words: words\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 25,\n  columnNumber: 3\n}, this);","map":{"version":3,"sources":["/Users/felipechernicharo/Desktop/Dev/testes/framer-motion-side-menu-forked/components/ContentPlaceholder.tsx"],"names":["React","motion","mix","randomInt","min","max","Math","round","random","generateParagraphLength","generateWordLength","paragraphs","Array","map","Word","width","Paragraph","words","ContentPlaceholder","collapsed","scale","open","duration"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,GAAT,QAAoB,oBAApB;;AAEA,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAcC,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACE,GAAD,EAAMC,GAAN,EAAWC,IAAI,CAACE,MAAL,EAAX,CAAd,CAAhC;;AACA,MAAMC,uBAAuB,GAAG,MAAMN,SAAS,CAAC,CAAD,EAAI,EAAJ,CAA/C;;AACA,MAAMO,kBAAkB,GAAG,MAAMP,SAAS,CAAC,EAAD,EAAK,GAAL,CAA1C,C,CAEA;;;AACA,MAAMQ,UAAU,GAAG,CAAC,GAAGC,KAAK,CAAC,CAAD,CAAT,EAAcC,GAAd,CAAkB,MAAM;AACzC,SAAO,CAAC,GAAGD,KAAK,CAACH,uBAAuB,EAAxB,CAAT,EAAsCI,GAAtC,CAA0CH,kBAA1C,CAAP;AACD,CAFkB,CAAnB;AAIA,OAAO,MAAMI,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBAAe;AAAK,EAAA,SAAS,EAAC,MAAf;AAAsB,EAAA,KAAK,EAAE;AAAEA,IAAAA;AAAF;AAA7B;AAAA;AAAA;AAAA;AAAA,QAA5B;;AAEP,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBAChB;AAAK,EAAA,SAAS,EAAC,WAAf;AAAA,YACGA,KAAK,CAACJ,GAAN,CAAWE,KAAD,iBACT,QAAC,IAAD;AAAM,IAAA,KAAK,EAAEA;AAAb;AAAA;AAAA;AAAA;AAAA,UADD;AADH;AAAA;AAAA;AAAA;AAAA,QADF;;AAQA,OAAO,MAAMG,kBAAkB,GAAG,mBAChC,QAAC,MAAD,CAAQ,GAAR;AACE,EAAA,QAAQ,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AAA6BC,IAAAA,IAAI,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT;AAAnC,GADZ;AAEE,EAAA,UAAU,EAAE;AAAEE,IAAAA,QAAQ,EAAE;AAAZ,GAFd;AAGE,EAAA,SAAS,EAAC,qBAHZ;AAAA,YAKGX,UAAU,CAACE,GAAX,CAAgBI,KAAD,iBACd,QAAC,SAAD;AAAW,IAAA,KAAK,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,UADD;AALH;AAAA;AAAA;AAAA;AAAA,QADK","sourcesContent":["import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { mix } from \"@popmotion/popcorn\";\n\nconst randomInt = (min, max) => Math.round(mix(min, max, Math.random()));\nconst generateParagraphLength = () => randomInt(5, 20);\nconst generateWordLength = () => randomInt(20, 100);\n\n// Randomly generate some paragraphs of word lengths\nconst paragraphs = [...Array(3)].map(() => {\n  return [...Array(generateParagraphLength())].map(generateWordLength);\n});\n\nexport const Word = ({ width }) => <div className=\"word\" style={{ width }} />;\n\nconst Paragraph = ({ words }) => (\n  <div className=\"paragraph\">\n    {words.map((width) => (\n      <Word width={width} />\n    ))}\n  </div>\n);\n\nexport const ContentPlaceholder = () => (\n  <motion.div\n    variants={{ collapsed: { scale: 0.8 }, open: { scale: 1 } }}\n    transition={{ duration: 0.8 }}\n    className=\"content-placeholder\"\n  >\n    {paragraphs.map((words) => (\n      <Paragraph words={words} />\n    ))}\n  </motion.div>\n);\n"]},"metadata":{},"sourceType":"module"}